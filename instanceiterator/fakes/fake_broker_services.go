// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/brokerapi/domain"
	"github.com/pivotal-cf/on-demand-service-broker/broker"
	"github.com/pivotal-cf/on-demand-service-broker/broker/services"
	"github.com/pivotal-cf/on-demand-service-broker/instanceiterator"
	"github.com/pivotal-cf/on-demand-service-broker/service"
)

type FakeBrokerServices struct {
	ProcessInstanceStub        func(instance service.Instance, operationType string) (services.BOSHOperation, error)
	processInstanceMutex       sync.RWMutex
	processInstanceArgsForCall []struct {
		instance      service.Instance
		operationType string
	}
	processInstanceReturns struct {
		result1 services.BOSHOperation
		result2 error
	}
	processInstanceReturnsOnCall map[int]struct {
		result1 services.BOSHOperation
		result2 error
	}
	LastOperationStub        func(instance string, operationData broker.OperationData) (domain.LastOperation, error)
	lastOperationMutex       sync.RWMutex
	lastOperationArgsForCall []struct {
		instance      string
		operationData broker.OperationData
	}
	lastOperationReturns struct {
		result1 domain.LastOperation
		result2 error
	}
	lastOperationReturnsOnCall map[int]struct {
		result1 domain.LastOperation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBrokerServices) ProcessInstance(instance service.Instance, operationType string) (services.BOSHOperation, error) {
	fake.processInstanceMutex.Lock()
	ret, specificReturn := fake.processInstanceReturnsOnCall[len(fake.processInstanceArgsForCall)]
	fake.processInstanceArgsForCall = append(fake.processInstanceArgsForCall, struct {
		instance      service.Instance
		operationType string
	}{instance, operationType})
	fake.recordInvocation("ProcessInstance", []interface{}{instance, operationType})
	fake.processInstanceMutex.Unlock()
	if fake.ProcessInstanceStub != nil {
		return fake.ProcessInstanceStub(instance, operationType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.processInstanceReturns.result1, fake.processInstanceReturns.result2
}

func (fake *FakeBrokerServices) ProcessInstanceCallCount() int {
	fake.processInstanceMutex.RLock()
	defer fake.processInstanceMutex.RUnlock()
	return len(fake.processInstanceArgsForCall)
}

func (fake *FakeBrokerServices) ProcessInstanceArgsForCall(i int) (service.Instance, string) {
	fake.processInstanceMutex.RLock()
	defer fake.processInstanceMutex.RUnlock()
	return fake.processInstanceArgsForCall[i].instance, fake.processInstanceArgsForCall[i].operationType
}

func (fake *FakeBrokerServices) ProcessInstanceReturns(result1 services.BOSHOperation, result2 error) {
	fake.ProcessInstanceStub = nil
	fake.processInstanceReturns = struct {
		result1 services.BOSHOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerServices) ProcessInstanceReturnsOnCall(i int, result1 services.BOSHOperation, result2 error) {
	fake.ProcessInstanceStub = nil
	if fake.processInstanceReturnsOnCall == nil {
		fake.processInstanceReturnsOnCall = make(map[int]struct {
			result1 services.BOSHOperation
			result2 error
		})
	}
	fake.processInstanceReturnsOnCall[i] = struct {
		result1 services.BOSHOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerServices) LastOperation(instance string, operationData broker.OperationData) (domain.LastOperation, error) {
	fake.lastOperationMutex.Lock()
	ret, specificReturn := fake.lastOperationReturnsOnCall[len(fake.lastOperationArgsForCall)]
	fake.lastOperationArgsForCall = append(fake.lastOperationArgsForCall, struct {
		instance      string
		operationData broker.OperationData
	}{instance, operationData})
	fake.recordInvocation("LastOperation", []interface{}{instance, operationData})
	fake.lastOperationMutex.Unlock()
	if fake.LastOperationStub != nil {
		return fake.LastOperationStub(instance, operationData)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.lastOperationReturns.result1, fake.lastOperationReturns.result2
}

func (fake *FakeBrokerServices) LastOperationCallCount() int {
	fake.lastOperationMutex.RLock()
	defer fake.lastOperationMutex.RUnlock()
	return len(fake.lastOperationArgsForCall)
}

func (fake *FakeBrokerServices) LastOperationArgsForCall(i int) (string, broker.OperationData) {
	fake.lastOperationMutex.RLock()
	defer fake.lastOperationMutex.RUnlock()
	return fake.lastOperationArgsForCall[i].instance, fake.lastOperationArgsForCall[i].operationData
}

func (fake *FakeBrokerServices) LastOperationReturns(result1 domain.LastOperation, result2 error) {
	fake.LastOperationStub = nil
	fake.lastOperationReturns = struct {
		result1 domain.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerServices) LastOperationReturnsOnCall(i int, result1 domain.LastOperation, result2 error) {
	fake.LastOperationStub = nil
	if fake.lastOperationReturnsOnCall == nil {
		fake.lastOperationReturnsOnCall = make(map[int]struct {
			result1 domain.LastOperation
			result2 error
		})
	}
	fake.lastOperationReturnsOnCall[i] = struct {
		result1 domain.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerServices) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processInstanceMutex.RLock()
	defer fake.processInstanceMutex.RUnlock()
	fake.lastOperationMutex.RLock()
	defer fake.lastOperationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBrokerServices) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ instanceiterator.BrokerServices = new(FakeBrokerServices)
