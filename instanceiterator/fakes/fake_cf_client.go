// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/coreos/go-semver/semver"
	"github.com/pivotal-cf/on-demand-service-broker/cf"
	"github.com/pivotal-cf/on-demand-service-broker/instanceiterator"
)

type FakeCFClient struct {
	GetOSBAPIVersionStub        func(*log.Logger) *semver.Version
	getOSBAPIVersionMutex       sync.RWMutex
	getOSBAPIVersionArgsForCall []struct {
		arg1 *log.Logger
	}
	getOSBAPIVersionReturns struct {
		result1 *semver.Version
	}
	getOSBAPIVersionReturnsOnCall map[int]struct {
		result1 *semver.Version
	}
	GetPlanByUniqueIDStub        func(string, *log.Logger) (cf.ServicePlan, error)
	getPlanByUniqueIDMutex       sync.RWMutex
	getPlanByUniqueIDArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getPlanByUniqueIDReturns struct {
		result1 cf.ServicePlan
		result2 error
	}
	getPlanByUniqueIDReturnsOnCall map[int]struct {
		result1 cf.ServicePlan
		result2 error
	}
	GetServiceInstanceStub        func(string, *log.Logger) (interface{}, error)
	getServiceInstanceMutex       sync.RWMutex
	getServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 *log.Logger
	}
	getServiceInstanceReturns struct {
		result1 interface{}
		result2 error
	}
	getServiceInstanceReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	UpgradeServiceInstanceStub        func(string, cf.MaintenanceInfo, *log.Logger) (cf.LastOperation, error)
	upgradeServiceInstanceMutex       sync.RWMutex
	upgradeServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 cf.MaintenanceInfo
		arg3 *log.Logger
	}
	upgradeServiceInstanceReturns struct {
		result1 cf.LastOperation
		result2 error
	}
	upgradeServiceInstanceReturnsOnCall map[int]struct {
		result1 cf.LastOperation
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) GetOSBAPIVersion(arg1 *log.Logger) *semver.Version {
	fake.getOSBAPIVersionMutex.Lock()
	ret, specificReturn := fake.getOSBAPIVersionReturnsOnCall[len(fake.getOSBAPIVersionArgsForCall)]
	fake.getOSBAPIVersionArgsForCall = append(fake.getOSBAPIVersionArgsForCall, struct {
		arg1 *log.Logger
	}{arg1})
	fake.recordInvocation("GetOSBAPIVersion", []interface{}{arg1})
	fake.getOSBAPIVersionMutex.Unlock()
	if fake.GetOSBAPIVersionStub != nil {
		return fake.GetOSBAPIVersionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getOSBAPIVersionReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) GetOSBAPIVersionCallCount() int {
	fake.getOSBAPIVersionMutex.RLock()
	defer fake.getOSBAPIVersionMutex.RUnlock()
	return len(fake.getOSBAPIVersionArgsForCall)
}

func (fake *FakeCFClient) GetOSBAPIVersionCalls(stub func(*log.Logger) *semver.Version) {
	fake.getOSBAPIVersionMutex.Lock()
	defer fake.getOSBAPIVersionMutex.Unlock()
	fake.GetOSBAPIVersionStub = stub
}

func (fake *FakeCFClient) GetOSBAPIVersionArgsForCall(i int) *log.Logger {
	fake.getOSBAPIVersionMutex.RLock()
	defer fake.getOSBAPIVersionMutex.RUnlock()
	argsForCall := fake.getOSBAPIVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetOSBAPIVersionReturns(result1 *semver.Version) {
	fake.getOSBAPIVersionMutex.Lock()
	defer fake.getOSBAPIVersionMutex.Unlock()
	fake.GetOSBAPIVersionStub = nil
	fake.getOSBAPIVersionReturns = struct {
		result1 *semver.Version
	}{result1}
}

func (fake *FakeCFClient) GetOSBAPIVersionReturnsOnCall(i int, result1 *semver.Version) {
	fake.getOSBAPIVersionMutex.Lock()
	defer fake.getOSBAPIVersionMutex.Unlock()
	fake.GetOSBAPIVersionStub = nil
	if fake.getOSBAPIVersionReturnsOnCall == nil {
		fake.getOSBAPIVersionReturnsOnCall = make(map[int]struct {
			result1 *semver.Version
		})
	}
	fake.getOSBAPIVersionReturnsOnCall[i] = struct {
		result1 *semver.Version
	}{result1}
}

func (fake *FakeCFClient) GetPlanByServiceInstanceGUID(arg1 string, arg2 *log.Logger) (cf.ServicePlan, error) {
	fake.getPlanByUniqueIDMutex.Lock()
	ret, specificReturn := fake.getPlanByUniqueIDReturnsOnCall[len(fake.getPlanByUniqueIDArgsForCall)]
	fake.getPlanByUniqueIDArgsForCall = append(fake.getPlanByUniqueIDArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetPlanByServiceInstanceGUID", []interface{}{arg1, arg2})
	fake.getPlanByUniqueIDMutex.Unlock()
	if fake.GetPlanByUniqueIDStub != nil {
		return fake.GetPlanByUniqueIDStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlanByUniqueIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetPlanByUniqueIDCallCount() int {
	fake.getPlanByUniqueIDMutex.RLock()
	defer fake.getPlanByUniqueIDMutex.RUnlock()
	return len(fake.getPlanByUniqueIDArgsForCall)
}

func (fake *FakeCFClient) GetPlanByUniqueIDCalls(stub func(string, *log.Logger) (cf.ServicePlan, error)) {
	fake.getPlanByUniqueIDMutex.Lock()
	defer fake.getPlanByUniqueIDMutex.Unlock()
	fake.GetPlanByUniqueIDStub = stub
}

func (fake *FakeCFClient) GetPlanByUniqueIDArgsForCall(i int) (string, *log.Logger) {
	fake.getPlanByUniqueIDMutex.RLock()
	defer fake.getPlanByUniqueIDMutex.RUnlock()
	argsForCall := fake.getPlanByUniqueIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) GetPlanByUniqueIDReturns(result1 cf.ServicePlan, result2 error) {
	fake.getPlanByUniqueIDMutex.Lock()
	defer fake.getPlanByUniqueIDMutex.Unlock()
	fake.GetPlanByUniqueIDStub = nil
	fake.getPlanByUniqueIDReturns = struct {
		result1 cf.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetPlanByUniqueIDReturnsOnCall(i int, result1 cf.ServicePlan, result2 error) {
	fake.getPlanByUniqueIDMutex.Lock()
	defer fake.getPlanByUniqueIDMutex.Unlock()
	fake.GetPlanByUniqueIDStub = nil
	if fake.getPlanByUniqueIDReturnsOnCall == nil {
		fake.getPlanByUniqueIDReturnsOnCall = make(map[int]struct {
			result1 cf.ServicePlan
			result2 error
		})
	}
	fake.getPlanByUniqueIDReturnsOnCall[i] = struct {
		result1 cf.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceInstance(arg1 string, arg2 *log.Logger) (interface{}, error) {
	fake.getServiceInstanceMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceReturnsOnCall[len(fake.getServiceInstanceArgsForCall)]
	fake.getServiceInstanceArgsForCall = append(fake.getServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("GetServiceInstance", []interface{}{arg1, arg2})
	fake.getServiceInstanceMutex.Unlock()
	if fake.GetServiceInstanceStub != nil {
		return fake.GetServiceInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceInstanceCallCount() int {
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	return len(fake.getServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) GetServiceInstanceCalls(stub func(string, *log.Logger) (interface{}, error)) {
	fake.getServiceInstanceMutex.Lock()
	defer fake.getServiceInstanceMutex.Unlock()
	fake.GetServiceInstanceStub = stub
}

func (fake *FakeCFClient) GetServiceInstanceArgsForCall(i int) (string, *log.Logger) {
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	argsForCall := fake.getServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) GetServiceInstanceReturns(result1 interface{}, result2 error) {
	fake.getServiceInstanceMutex.Lock()
	defer fake.getServiceInstanceMutex.Unlock()
	fake.GetServiceInstanceStub = nil
	fake.getServiceInstanceReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceInstanceReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.getServiceInstanceMutex.Lock()
	defer fake.getServiceInstanceMutex.Unlock()
	fake.GetServiceInstanceStub = nil
	if fake.getServiceInstanceReturnsOnCall == nil {
		fake.getServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.getServiceInstanceReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpgradeServiceInstance(arg1 string, arg2 cf.MaintenanceInfo, arg3 *log.Logger) (cf.LastOperation, error) {
	fake.upgradeServiceInstanceMutex.Lock()
	ret, specificReturn := fake.upgradeServiceInstanceReturnsOnCall[len(fake.upgradeServiceInstanceArgsForCall)]
	fake.upgradeServiceInstanceArgsForCall = append(fake.upgradeServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 cf.MaintenanceInfo
		arg3 *log.Logger
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpgradeServiceInstance", []interface{}{arg1, arg2, arg3})
	fake.upgradeServiceInstanceMutex.Unlock()
	if fake.UpgradeServiceInstanceStub != nil {
		return fake.UpgradeServiceInstanceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.upgradeServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpgradeServiceInstanceCallCount() int {
	fake.upgradeServiceInstanceMutex.RLock()
	defer fake.upgradeServiceInstanceMutex.RUnlock()
	return len(fake.upgradeServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) UpgradeServiceInstanceCalls(stub func(string, cf.MaintenanceInfo, *log.Logger) (cf.LastOperation, error)) {
	fake.upgradeServiceInstanceMutex.Lock()
	defer fake.upgradeServiceInstanceMutex.Unlock()
	fake.UpgradeServiceInstanceStub = stub
}

func (fake *FakeCFClient) UpgradeServiceInstanceArgsForCall(i int) (string, cf.MaintenanceInfo, *log.Logger) {
	fake.upgradeServiceInstanceMutex.RLock()
	defer fake.upgradeServiceInstanceMutex.RUnlock()
	argsForCall := fake.upgradeServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) UpgradeServiceInstanceReturns(result1 cf.LastOperation, result2 error) {
	fake.upgradeServiceInstanceMutex.Lock()
	defer fake.upgradeServiceInstanceMutex.Unlock()
	fake.UpgradeServiceInstanceStub = nil
	fake.upgradeServiceInstanceReturns = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpgradeServiceInstanceReturnsOnCall(i int, result1 cf.LastOperation, result2 error) {
	fake.upgradeServiceInstanceMutex.Lock()
	defer fake.upgradeServiceInstanceMutex.Unlock()
	fake.UpgradeServiceInstanceStub = nil
	if fake.upgradeServiceInstanceReturnsOnCall == nil {
		fake.upgradeServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 cf.LastOperation
			result2 error
		})
	}
	fake.upgradeServiceInstanceReturnsOnCall[i] = struct {
		result1 cf.LastOperation
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOSBAPIVersionMutex.RLock()
	defer fake.getOSBAPIVersionMutex.RUnlock()
	fake.getPlanByUniqueIDMutex.RLock()
	defer fake.getPlanByUniqueIDMutex.RUnlock()
	fake.getServiceInstanceMutex.RLock()
	defer fake.getServiceInstanceMutex.RUnlock()
	fake.upgradeServiceInstanceMutex.RLock()
	defer fake.upgradeServiceInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ instanceiterator.CFClient = new(FakeCFClient)
