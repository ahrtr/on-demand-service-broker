// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/on-demand-service-broker/task"
)

type FakePreUpgradeChecker struct {
	ShouldUpgradeStub        func(task.GenerateManifestProperties, *log.Logger) bool
	shouldUpgradeMutex       sync.RWMutex
	shouldUpgradeArgsForCall []struct {
		arg1 task.GenerateManifestProperties
		arg2 *log.Logger
	}
	shouldUpgradeReturns struct {
		result1 bool
	}
	shouldUpgradeReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePreUpgradeChecker) ShouldUpgrade(arg1 task.GenerateManifestProperties, arg2 *log.Logger) bool {
	fake.shouldUpgradeMutex.Lock()
	ret, specificReturn := fake.shouldUpgradeReturnsOnCall[len(fake.shouldUpgradeArgsForCall)]
	fake.shouldUpgradeArgsForCall = append(fake.shouldUpgradeArgsForCall, struct {
		arg1 task.GenerateManifestProperties
		arg2 *log.Logger
	}{arg1, arg2})
	fake.recordInvocation("ShouldUpgrade", []interface{}{arg1, arg2})
	fake.shouldUpgradeMutex.Unlock()
	if fake.ShouldUpgradeStub != nil {
		return fake.ShouldUpgradeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.shouldUpgradeReturns
	return fakeReturns.result1
}

func (fake *FakePreUpgradeChecker) ShouldUpgradeCallCount() int {
	fake.shouldUpgradeMutex.RLock()
	defer fake.shouldUpgradeMutex.RUnlock()
	return len(fake.shouldUpgradeArgsForCall)
}

func (fake *FakePreUpgradeChecker) ShouldUpgradeCalls(stub func(task.GenerateManifestProperties, *log.Logger) bool) {
	fake.shouldUpgradeMutex.Lock()
	defer fake.shouldUpgradeMutex.Unlock()
	fake.ShouldUpgradeStub = stub
}

func (fake *FakePreUpgradeChecker) ShouldUpgradeArgsForCall(i int) (task.GenerateManifestProperties, *log.Logger) {
	fake.shouldUpgradeMutex.RLock()
	defer fake.shouldUpgradeMutex.RUnlock()
	argsForCall := fake.shouldUpgradeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePreUpgradeChecker) ShouldUpgradeReturns(result1 bool) {
	fake.shouldUpgradeMutex.Lock()
	defer fake.shouldUpgradeMutex.Unlock()
	fake.ShouldUpgradeStub = nil
	fake.shouldUpgradeReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePreUpgradeChecker) ShouldUpgradeReturnsOnCall(i int, result1 bool) {
	fake.shouldUpgradeMutex.Lock()
	defer fake.shouldUpgradeMutex.Unlock()
	fake.ShouldUpgradeStub = nil
	if fake.shouldUpgradeReturnsOnCall == nil {
		fake.shouldUpgradeReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.shouldUpgradeReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakePreUpgradeChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.shouldUpgradeMutex.RLock()
	defer fake.shouldUpgradeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePreUpgradeChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ task.PreUpgradeChecker = new(FakePreUpgradeChecker)
