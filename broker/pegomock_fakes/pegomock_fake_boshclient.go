// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/pivotal-cf/on-demand-service-broker/broker (interfaces: BoshClient)

package pegomockfakes

import (
	pegomock "github.com/petergtz/pegomock"
	boshdirector "github.com/pivotal-cf/on-demand-service-broker/boshdirector"
	config "github.com/pivotal-cf/on-demand-service-broker/config"
	bosh "github.com/pivotal-cf/on-demand-services-sdk/bosh"
	log "log"
	"reflect"
	"time"
)

type MockBoshClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockBoshClient(options ...pegomock.Option) *MockBoshClient {
	mock := &MockBoshClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockBoshClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockBoshClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockBoshClient) DeleteConfig(_param0 string, _param1 string, _param2 *log.Logger) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteConfig", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) DeleteConfigs(_param0 string, _param1 *log.Logger) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteConfigs", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockBoshClient) DeleteDeployment(_param0 string, _param1 string, _param2 bool, _param3 *boshdirector.AsyncTaskReporter, _param4 *log.Logger) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteDeployment", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) Deploy(_param0 []byte, _param1 string, _param2 *log.Logger, _param3 *boshdirector.AsyncTaskReporter) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Deploy", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetConfigs(_param0 string, _param1 *log.Logger) ([]boshdirector.BoshConfig, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetConfigs", params, []reflect.Type{reflect.TypeOf((*[]boshdirector.BoshConfig)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []boshdirector.BoshConfig
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]boshdirector.BoshConfig)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetDNSAddresses(_param0 string, _param1 []config.BindingDNS) (map[string]string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetDNSAddresses", params, []reflect.Type{reflect.TypeOf((*map[string]string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 map[string]string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(map[string]string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetDeployment(_param0 string, _param1 *log.Logger) ([]byte, bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetDeployment", params, []reflect.Type{reflect.TypeOf((*[]byte)(nil)).Elem(), reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []byte
	var ret1 bool
	var ret2 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]byte)
		}
		if result[1] != nil {
			ret1 = result[1].(bool)
		}
		if result[2] != nil {
			ret2 = result[2].(error)
		}
	}
	return ret0, ret1, ret2
}

func (mock *MockBoshClient) GetDeployments(_param0 *log.Logger) ([]boshdirector.Deployment, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetDeployments", params, []reflect.Type{reflect.TypeOf((*[]boshdirector.Deployment)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []boshdirector.Deployment
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]boshdirector.Deployment)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetInfo(_param0 *log.Logger) (boshdirector.Info, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetInfo", params, []reflect.Type{reflect.TypeOf((*boshdirector.Info)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 boshdirector.Info
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(boshdirector.Info)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetNormalisedTasksByContext(_param0 string, _param1 string, _param2 *log.Logger) (boshdirector.BoshTasks, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetNormalisedTasksByContext", params, []reflect.Type{reflect.TypeOf((*boshdirector.BoshTasks)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 boshdirector.BoshTasks
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(boshdirector.BoshTasks)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetTask(_param0 int, _param1 *log.Logger) (boshdirector.BoshTask, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetTask", params, []reflect.Type{reflect.TypeOf((*boshdirector.BoshTask)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 boshdirector.BoshTask
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(boshdirector.BoshTask)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) GetTasks(_param0 string, _param1 *log.Logger) (boshdirector.BoshTasks, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetTasks", params, []reflect.Type{reflect.TypeOf((*boshdirector.BoshTasks)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 boshdirector.BoshTasks
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(boshdirector.BoshTasks)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) Recreate(_param0 string, _param1 string, _param2 *log.Logger, _param3 *boshdirector.AsyncTaskReporter) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Recreate", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) RunErrand(_param0 string, _param1 string, _param2 []string, _param3 string, _param4 *log.Logger, _param5 *boshdirector.AsyncTaskReporter) (int, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4, _param5}
	result := pegomock.GetGenericMockFrom(mock).Invoke("RunErrand", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 int
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) VMs(_param0 string, _param1 *log.Logger) (bosh.BoshVMs, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("VMs", params, []reflect.Type{reflect.TypeOf((*bosh.BoshVMs)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bosh.BoshVMs
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bosh.BoshVMs)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) Variables(_param0 string, _param1 *log.Logger) ([]boshdirector.Variable, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Variables", params, []reflect.Type{reflect.TypeOf((*[]boshdirector.Variable)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []boshdirector.Variable
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]boshdirector.Variable)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockBoshClient) VerifyAuth(_param0 *log.Logger) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockBoshClient().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("VerifyAuth", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockBoshClient) VerifyWasCalledOnce() *VerifierMockBoshClient {
	return &VerifierMockBoshClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockBoshClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockBoshClient {
	return &VerifierMockBoshClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockBoshClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockBoshClient {
	return &VerifierMockBoshClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockBoshClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockBoshClient {
	return &VerifierMockBoshClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockBoshClient struct {
	mock                   *MockBoshClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockBoshClient) DeleteConfig(_param0 string, _param1 string, _param2 *log.Logger) *MockBoshClient_DeleteConfig_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteConfig", params, verifier.timeout)
	return &MockBoshClient_DeleteConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_DeleteConfig_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_DeleteConfig_OngoingVerification) GetCapturedArguments() (string, string, *log.Logger) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockBoshClient_DeleteConfig_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]*log.Logger, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) DeleteConfigs(_param0 string, _param1 *log.Logger) *MockBoshClient_DeleteConfigs_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteConfigs", params, verifier.timeout)
	return &MockBoshClient_DeleteConfigs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_DeleteConfigs_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_DeleteConfigs_OngoingVerification) GetCapturedArguments() (string, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_DeleteConfigs_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) DeleteDeployment(_param0 string, _param1 string, _param2 bool, _param3 *boshdirector.AsyncTaskReporter, _param4 *log.Logger) *MockBoshClient_DeleteDeployment_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteDeployment", params, verifier.timeout)
	return &MockBoshClient_DeleteDeployment_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_DeleteDeployment_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_DeleteDeployment_OngoingVerification) GetCapturedArguments() (string, string, bool, *boshdirector.AsyncTaskReporter, *log.Logger) {
	_param0, _param1, _param2, _param3, _param4 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1], _param4[len(_param4)-1]
}

func (c *MockBoshClient_DeleteDeployment_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []bool, _param3 []*boshdirector.AsyncTaskReporter, _param4 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]bool, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(bool)
		}
		_param3 = make([]*boshdirector.AsyncTaskReporter, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(*boshdirector.AsyncTaskReporter)
		}
		_param4 = make([]*log.Logger, len(params[4]))
		for u, param := range params[4] {
			_param4[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) Deploy(_param0 []byte, _param1 string, _param2 *log.Logger, _param3 *boshdirector.AsyncTaskReporter) *MockBoshClient_Deploy_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Deploy", params, verifier.timeout)
	return &MockBoshClient_Deploy_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_Deploy_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_Deploy_OngoingVerification) GetCapturedArguments() ([]byte, string, *log.Logger, *boshdirector.AsyncTaskReporter) {
	_param0, _param1, _param2, _param3 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1]
}

func (c *MockBoshClient_Deploy_OngoingVerification) GetAllCapturedArguments() (_param0 [][]byte, _param1 []string, _param2 []*log.Logger, _param3 []*boshdirector.AsyncTaskReporter) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([][]byte, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.([]byte)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]*log.Logger, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(*log.Logger)
		}
		_param3 = make([]*boshdirector.AsyncTaskReporter, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(*boshdirector.AsyncTaskReporter)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetConfigs(_param0 string, _param1 *log.Logger) *MockBoshClient_GetConfigs_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetConfigs", params, verifier.timeout)
	return &MockBoshClient_GetConfigs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetConfigs_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetConfigs_OngoingVerification) GetCapturedArguments() (string, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_GetConfigs_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetDNSAddresses(_param0 string, _param1 []config.BindingDNS) *MockBoshClient_GetDNSAddresses_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetDNSAddresses", params, verifier.timeout)
	return &MockBoshClient_GetDNSAddresses_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetDNSAddresses_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetDNSAddresses_OngoingVerification) GetCapturedArguments() (string, []config.BindingDNS) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_GetDNSAddresses_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 [][]config.BindingDNS) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([][]config.BindingDNS, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.([]config.BindingDNS)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetDeployment(_param0 string, _param1 *log.Logger) *MockBoshClient_GetDeployment_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetDeployment", params, verifier.timeout)
	return &MockBoshClient_GetDeployment_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetDeployment_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetDeployment_OngoingVerification) GetCapturedArguments() (string, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_GetDeployment_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetDeployments(_param0 *log.Logger) *MockBoshClient_GetDeployments_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetDeployments", params, verifier.timeout)
	return &MockBoshClient_GetDeployments_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetDeployments_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetDeployments_OngoingVerification) GetCapturedArguments() *log.Logger {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockBoshClient_GetDeployments_OngoingVerification) GetAllCapturedArguments() (_param0 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*log.Logger, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetInfo(_param0 *log.Logger) *MockBoshClient_GetInfo_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetInfo", params, verifier.timeout)
	return &MockBoshClient_GetInfo_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetInfo_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetInfo_OngoingVerification) GetCapturedArguments() *log.Logger {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockBoshClient_GetInfo_OngoingVerification) GetAllCapturedArguments() (_param0 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*log.Logger, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetNormalisedTasksByContext(_param0 string, _param1 string, _param2 *log.Logger) *MockBoshClient_GetNormalisedTasksByContext_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetNormalisedTasksByContext", params, verifier.timeout)
	return &MockBoshClient_GetNormalisedTasksByContext_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetNormalisedTasksByContext_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetNormalisedTasksByContext_OngoingVerification) GetCapturedArguments() (string, string, *log.Logger) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *MockBoshClient_GetNormalisedTasksByContext_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]*log.Logger, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetTask(_param0 int, _param1 *log.Logger) *MockBoshClient_GetTask_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetTask", params, verifier.timeout)
	return &MockBoshClient_GetTask_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetTask_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetTask_OngoingVerification) GetCapturedArguments() (int, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_GetTask_OngoingVerification) GetAllCapturedArguments() (_param0 []int, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]int, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(int)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) GetTasks(_param0 string, _param1 *log.Logger) *MockBoshClient_GetTasks_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetTasks", params, verifier.timeout)
	return &MockBoshClient_GetTasks_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_GetTasks_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_GetTasks_OngoingVerification) GetCapturedArguments() (string, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_GetTasks_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) Recreate(_param0 string, _param1 string, _param2 *log.Logger, _param3 *boshdirector.AsyncTaskReporter) *MockBoshClient_Recreate_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Recreate", params, verifier.timeout)
	return &MockBoshClient_Recreate_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_Recreate_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_Recreate_OngoingVerification) GetCapturedArguments() (string, string, *log.Logger, *boshdirector.AsyncTaskReporter) {
	_param0, _param1, _param2, _param3 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1]
}

func (c *MockBoshClient_Recreate_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 []*log.Logger, _param3 []*boshdirector.AsyncTaskReporter) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([]*log.Logger, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.(*log.Logger)
		}
		_param3 = make([]*boshdirector.AsyncTaskReporter, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(*boshdirector.AsyncTaskReporter)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) RunErrand(_param0 string, _param1 string, _param2 []string, _param3 string, _param4 *log.Logger, _param5 *boshdirector.AsyncTaskReporter) *MockBoshClient_RunErrand_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4, _param5}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "RunErrand", params, verifier.timeout)
	return &MockBoshClient_RunErrand_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_RunErrand_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_RunErrand_OngoingVerification) GetCapturedArguments() (string, string, []string, string, *log.Logger, *boshdirector.AsyncTaskReporter) {
	_param0, _param1, _param2, _param3, _param4, _param5 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1], _param4[len(_param4)-1], _param5[len(_param5)-1]
}

func (c *MockBoshClient_RunErrand_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string, _param2 [][]string, _param3 []string, _param4 []*log.Logger, _param5 []*boshdirector.AsyncTaskReporter) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
		_param2 = make([][]string, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.([]string)
		}
		_param3 = make([]string, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(string)
		}
		_param4 = make([]*log.Logger, len(params[4]))
		for u, param := range params[4] {
			_param4[u] = param.(*log.Logger)
		}
		_param5 = make([]*boshdirector.AsyncTaskReporter, len(params[5]))
		for u, param := range params[5] {
			_param5[u] = param.(*boshdirector.AsyncTaskReporter)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) VMs(_param0 string, _param1 *log.Logger) *MockBoshClient_VMs_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "VMs", params, verifier.timeout)
	return &MockBoshClient_VMs_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_VMs_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_VMs_OngoingVerification) GetCapturedArguments() (string, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_VMs_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) Variables(_param0 string, _param1 *log.Logger) *MockBoshClient_Variables_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Variables", params, verifier.timeout)
	return &MockBoshClient_Variables_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_Variables_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_Variables_OngoingVerification) GetCapturedArguments() (string, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockBoshClient_Variables_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockBoshClient) VerifyAuth(_param0 *log.Logger) *MockBoshClient_VerifyAuth_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "VerifyAuth", params, verifier.timeout)
	return &MockBoshClient_VerifyAuth_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockBoshClient_VerifyAuth_OngoingVerification struct {
	mock              *MockBoshClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockBoshClient_VerifyAuth_OngoingVerification) GetCapturedArguments() *log.Logger {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockBoshClient_VerifyAuth_OngoingVerification) GetAllCapturedArguments() (_param0 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*log.Logger, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*log.Logger)
		}
	}
	return
}
