// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/pivotal-cf/on-demand-service-broker/broker (interfaces: ServiceAdapterClient)

package pegomockfakes

import (
	pegomock "github.com/petergtz/pegomock"
	domain "github.com/pivotal-cf/brokerapi/domain"
	bosh "github.com/pivotal-cf/on-demand-services-sdk/bosh"
	serviceadapter "github.com/pivotal-cf/on-demand-services-sdk/serviceadapter"
	log "log"
	"reflect"
	"time"
)

type MockServiceAdapterClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockServiceAdapterClient(options ...pegomock.Option) *MockServiceAdapterClient {
	mock := &MockServiceAdapterClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockServiceAdapterClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockServiceAdapterClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockServiceAdapterClient) CreateBinding(_param0 string, _param1 bosh.BoshVMs, _param2 []byte, _param3 map[string]interface{}, _param4 map[string]string, _param5 map[string]string, _param6 *log.Logger) (serviceadapter.Binding, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockServiceAdapterClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4, _param5, _param6}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateBinding", params, []reflect.Type{reflect.TypeOf((*serviceadapter.Binding)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 serviceadapter.Binding
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(serviceadapter.Binding)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockServiceAdapterClient) DeleteBinding(_param0 string, _param1 bosh.BoshVMs, _param2 []byte, _param3 map[string]interface{}, _param4 map[string]string, _param5 map[string]string, _param6 *log.Logger) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockServiceAdapterClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4, _param5, _param6}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DeleteBinding", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockServiceAdapterClient) GenerateDashboardUrl(_param0 string, _param1 serviceadapter.Plan, _param2 []byte, _param3 *log.Logger) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockServiceAdapterClient().")
	}
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GenerateDashboardUrl", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockServiceAdapterClient) GeneratePlanSchema(_param0 serviceadapter.Plan, _param1 *log.Logger) (domain.ServiceSchemas, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockServiceAdapterClient().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GeneratePlanSchema", params, []reflect.Type{reflect.TypeOf((*domain.ServiceSchemas)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 domain.ServiceSchemas
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(domain.ServiceSchemas)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockServiceAdapterClient) VerifyWasCalledOnce() *VerifierMockServiceAdapterClient {
	return &VerifierMockServiceAdapterClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockServiceAdapterClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockServiceAdapterClient {
	return &VerifierMockServiceAdapterClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockServiceAdapterClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockServiceAdapterClient {
	return &VerifierMockServiceAdapterClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockServiceAdapterClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockServiceAdapterClient {
	return &VerifierMockServiceAdapterClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockServiceAdapterClient struct {
	mock                   *MockServiceAdapterClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockServiceAdapterClient) CreateBinding(_param0 string, _param1 bosh.BoshVMs, _param2 []byte, _param3 map[string]interface{}, _param4 map[string]string, _param5 map[string]string, _param6 *log.Logger) *MockServiceAdapterClient_CreateBinding_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4, _param5, _param6}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateBinding", params, verifier.timeout)
	return &MockServiceAdapterClient_CreateBinding_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockServiceAdapterClient_CreateBinding_OngoingVerification struct {
	mock              *MockServiceAdapterClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockServiceAdapterClient_CreateBinding_OngoingVerification) GetCapturedArguments() (string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) {
	_param0, _param1, _param2, _param3, _param4, _param5, _param6 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1], _param4[len(_param4)-1], _param5[len(_param5)-1], _param6[len(_param6)-1]
}

func (c *MockServiceAdapterClient_CreateBinding_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []bosh.BoshVMs, _param2 [][]byte, _param3 []map[string]interface{}, _param4 []map[string]string, _param5 []map[string]string, _param6 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]bosh.BoshVMs, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(bosh.BoshVMs)
		}
		_param2 = make([][]byte, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.([]byte)
		}
		_param3 = make([]map[string]interface{}, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(map[string]interface{})
		}
		_param4 = make([]map[string]string, len(params[4]))
		for u, param := range params[4] {
			_param4[u] = param.(map[string]string)
		}
		_param5 = make([]map[string]string, len(params[5]))
		for u, param := range params[5] {
			_param5[u] = param.(map[string]string)
		}
		_param6 = make([]*log.Logger, len(params[6]))
		for u, param := range params[6] {
			_param6[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockServiceAdapterClient) DeleteBinding(_param0 string, _param1 bosh.BoshVMs, _param2 []byte, _param3 map[string]interface{}, _param4 map[string]string, _param5 map[string]string, _param6 *log.Logger) *MockServiceAdapterClient_DeleteBinding_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3, _param4, _param5, _param6}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeleteBinding", params, verifier.timeout)
	return &MockServiceAdapterClient_DeleteBinding_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockServiceAdapterClient_DeleteBinding_OngoingVerification struct {
	mock              *MockServiceAdapterClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockServiceAdapterClient_DeleteBinding_OngoingVerification) GetCapturedArguments() (string, bosh.BoshVMs, []byte, map[string]interface{}, map[string]string, map[string]string, *log.Logger) {
	_param0, _param1, _param2, _param3, _param4, _param5, _param6 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1], _param4[len(_param4)-1], _param5[len(_param5)-1], _param6[len(_param6)-1]
}

func (c *MockServiceAdapterClient_DeleteBinding_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []bosh.BoshVMs, _param2 [][]byte, _param3 []map[string]interface{}, _param4 []map[string]string, _param5 []map[string]string, _param6 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]bosh.BoshVMs, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(bosh.BoshVMs)
		}
		_param2 = make([][]byte, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.([]byte)
		}
		_param3 = make([]map[string]interface{}, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(map[string]interface{})
		}
		_param4 = make([]map[string]string, len(params[4]))
		for u, param := range params[4] {
			_param4[u] = param.(map[string]string)
		}
		_param5 = make([]map[string]string, len(params[5]))
		for u, param := range params[5] {
			_param5[u] = param.(map[string]string)
		}
		_param6 = make([]*log.Logger, len(params[6]))
		for u, param := range params[6] {
			_param6[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockServiceAdapterClient) GenerateDashboardUrl(_param0 string, _param1 serviceadapter.Plan, _param2 []byte, _param3 *log.Logger) *MockServiceAdapterClient_GenerateDashboardUrl_OngoingVerification {
	params := []pegomock.Param{_param0, _param1, _param2, _param3}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GenerateDashboardUrl", params, verifier.timeout)
	return &MockServiceAdapterClient_GenerateDashboardUrl_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockServiceAdapterClient_GenerateDashboardUrl_OngoingVerification struct {
	mock              *MockServiceAdapterClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockServiceAdapterClient_GenerateDashboardUrl_OngoingVerification) GetCapturedArguments() (string, serviceadapter.Plan, []byte, *log.Logger) {
	_param0, _param1, _param2, _param3 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1], _param3[len(_param3)-1]
}

func (c *MockServiceAdapterClient_GenerateDashboardUrl_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []serviceadapter.Plan, _param2 [][]byte, _param3 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]serviceadapter.Plan, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(serviceadapter.Plan)
		}
		_param2 = make([][]byte, len(params[2]))
		for u, param := range params[2] {
			_param2[u] = param.([]byte)
		}
		_param3 = make([]*log.Logger, len(params[3]))
		for u, param := range params[3] {
			_param3[u] = param.(*log.Logger)
		}
	}
	return
}

func (verifier *VerifierMockServiceAdapterClient) GeneratePlanSchema(_param0 serviceadapter.Plan, _param1 *log.Logger) *MockServiceAdapterClient_GeneratePlanSchema_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GeneratePlanSchema", params, verifier.timeout)
	return &MockServiceAdapterClient_GeneratePlanSchema_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockServiceAdapterClient_GeneratePlanSchema_OngoingVerification struct {
	mock              *MockServiceAdapterClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockServiceAdapterClient_GeneratePlanSchema_OngoingVerification) GetCapturedArguments() (serviceadapter.Plan, *log.Logger) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockServiceAdapterClient_GeneratePlanSchema_OngoingVerification) GetAllCapturedArguments() (_param0 []serviceadapter.Plan, _param1 []*log.Logger) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]serviceadapter.Plan, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(serviceadapter.Plan)
		}
		_param1 = make([]*log.Logger, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*log.Logger)
		}
	}
	return
}
