// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/brokerapi/v7/domain"
	"github.com/pivotal-cf/on-demand-service-broker/broker"
)

type FakeDecider struct {
	DecideStub        func([]domain.Service, domain.UpdateDetails, *log.Logger) error
	decideMutex       sync.RWMutex
	decideArgsForCall []struct {
		arg1 []domain.Service
		arg2 domain.UpdateDetails
		arg3 *log.Logger
	}
	decideReturns struct {
		result1 error
	}
	decideReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDecider) Decide(arg1 []domain.Service, arg2 domain.UpdateDetails, arg3 *log.Logger) error {
	var arg1Copy []domain.Service
	if arg1 != nil {
		arg1Copy = make([]domain.Service, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.decideMutex.Lock()
	ret, specificReturn := fake.decideReturnsOnCall[len(fake.decideArgsForCall)]
	fake.decideArgsForCall = append(fake.decideArgsForCall, struct {
		arg1 []domain.Service
		arg2 domain.UpdateDetails
		arg3 *log.Logger
	}{arg1Copy, arg2, arg3})
	fake.recordInvocation("Decide", []interface{}{arg1Copy, arg2, arg3})
	fake.decideMutex.Unlock()
	if fake.DecideStub != nil {
		return fake.DecideStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.decideReturns
	return fakeReturns.result1
}

func (fake *FakeDecider) DecideCallCount() int {
	fake.decideMutex.RLock()
	defer fake.decideMutex.RUnlock()
	return len(fake.decideArgsForCall)
}

func (fake *FakeDecider) DecideCalls(stub func([]domain.Service, domain.UpdateDetails, *log.Logger) error) {
	fake.decideMutex.Lock()
	defer fake.decideMutex.Unlock()
	fake.DecideStub = stub
}

func (fake *FakeDecider) DecideArgsForCall(i int) ([]domain.Service, domain.UpdateDetails, *log.Logger) {
	fake.decideMutex.RLock()
	defer fake.decideMutex.RUnlock()
	argsForCall := fake.decideArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDecider) DecideReturns(result1 error) {
	fake.decideMutex.Lock()
	defer fake.decideMutex.Unlock()
	fake.DecideStub = nil
	fake.decideReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDecider) DecideReturnsOnCall(i int, result1 error) {
	fake.decideMutex.Lock()
	defer fake.decideMutex.Unlock()
	fake.DecideStub = nil
	if fake.decideReturnsOnCall == nil {
		fake.decideReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decideReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDecider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decideMutex.RLock()
	defer fake.decideMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDecider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ broker.Decider = new(FakeDecider)
